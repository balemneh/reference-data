/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.dhs.cbp.reference.events.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CountryEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8871229790521983308L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CountryEvent\",\"namespace\":\"gov.dhs.cbp.reference.events.avro\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for this event\"},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"symbols\":[\"CREATED\",\"UPDATED\",\"DELETED\",\"DEPRECATED\"]},\"doc\":\"Type of event\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"When the event occurred\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"countryId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"UUID of the country\"},{\"name\":\"countryCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Country code\"},{\"name\":\"countryName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Country name\"},{\"name\":\"codeSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Code system (e.g., ISO3166-1)\"},{\"name\":\"iso2Code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ISO 2-character code\",\"default\":null},{\"name\":\"iso3Code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ISO 3-character code\",\"default\":null},{\"name\":\"numericCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ISO numeric code\",\"default\":null},{\"name\":\"validFrom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Start of validity period (ISO date)\"},{\"name\":\"validTo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"End of validity period (ISO date)\",\"default\":null},{\"name\":\"version\",\"type\":\"long\",\"doc\":\"Version number\"},{\"name\":\"changeRequestId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Associated change request\",\"default\":null},{\"name\":\"recordedBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User who recorded this change\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CountryEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CountryEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CountryEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CountryEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CountryEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CountryEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CountryEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CountryEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CountryEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for this event */
  private java.lang.String eventId;
  /** Type of event */
  private gov.dhs.cbp.reference.events.avro.EventType eventType;
  /** When the event occurred */
  private long timestamp;
  /** UUID of the country */
  private java.lang.String countryId;
  /** Country code */
  private java.lang.String countryCode;
  /** Country name */
  private java.lang.String countryName;
  /** Code system (e.g., ISO3166-1) */
  private java.lang.String codeSystem;
  /** ISO 2-character code */
  private java.lang.String iso2Code;
  /** ISO 3-character code */
  private java.lang.String iso3Code;
  /** ISO numeric code */
  private java.lang.String numericCode;
  /** Start of validity period (ISO date) */
  private java.lang.String validFrom;
  /** End of validity period (ISO date) */
  private java.lang.String validTo;
  /** Version number */
  private long version;
  /** Associated change request */
  private java.lang.String changeRequestId;
  /** User who recorded this change */
  private java.lang.String recordedBy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CountryEvent() {}

  /**
   * All-args constructor.
   * @param eventId Unique identifier for this event
   * @param eventType Type of event
   * @param timestamp When the event occurred
   * @param countryId UUID of the country
   * @param countryCode Country code
   * @param countryName Country name
   * @param codeSystem Code system (e.g., ISO3166-1)
   * @param iso2Code ISO 2-character code
   * @param iso3Code ISO 3-character code
   * @param numericCode ISO numeric code
   * @param validFrom Start of validity period (ISO date)
   * @param validTo End of validity period (ISO date)
   * @param version Version number
   * @param changeRequestId Associated change request
   * @param recordedBy User who recorded this change
   */
  public CountryEvent(java.lang.String eventId, gov.dhs.cbp.reference.events.avro.EventType eventType, java.lang.Long timestamp, java.lang.String countryId, java.lang.String countryCode, java.lang.String countryName, java.lang.String codeSystem, java.lang.String iso2Code, java.lang.String iso3Code, java.lang.String numericCode, java.lang.String validFrom, java.lang.String validTo, java.lang.Long version, java.lang.String changeRequestId, java.lang.String recordedBy) {
    this.eventId = eventId;
    this.eventType = eventType;
    this.timestamp = timestamp;
    this.countryId = countryId;
    this.countryCode = countryCode;
    this.countryName = countryName;
    this.codeSystem = codeSystem;
    this.iso2Code = iso2Code;
    this.iso3Code = iso3Code;
    this.numericCode = numericCode;
    this.validFrom = validFrom;
    this.validTo = validTo;
    this.version = version;
    this.changeRequestId = changeRequestId;
    this.recordedBy = recordedBy;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return eventType;
    case 2: return timestamp;
    case 3: return countryId;
    case 4: return countryCode;
    case 5: return countryName;
    case 6: return codeSystem;
    case 7: return iso2Code;
    case 8: return iso3Code;
    case 9: return numericCode;
    case 10: return validFrom;
    case 11: return validTo;
    case 12: return version;
    case 13: return changeRequestId;
    case 14: return recordedBy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = value$ != null ? value$.toString() : null; break;
    case 1: eventType = (gov.dhs.cbp.reference.events.avro.EventType)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: countryId = value$ != null ? value$.toString() : null; break;
    case 4: countryCode = value$ != null ? value$.toString() : null; break;
    case 5: countryName = value$ != null ? value$.toString() : null; break;
    case 6: codeSystem = value$ != null ? value$.toString() : null; break;
    case 7: iso2Code = value$ != null ? value$.toString() : null; break;
    case 8: iso3Code = value$ != null ? value$.toString() : null; break;
    case 9: numericCode = value$ != null ? value$.toString() : null; break;
    case 10: validFrom = value$ != null ? value$.toString() : null; break;
    case 11: validTo = value$ != null ? value$.toString() : null; break;
    case 12: version = (java.lang.Long)value$; break;
    case 13: changeRequestId = value$ != null ? value$.toString() : null; break;
    case 14: recordedBy = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return Unique identifier for this event
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * Unique identifier for this event
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return Type of event
   */
  public gov.dhs.cbp.reference.events.avro.EventType getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * Type of event
   * @param value the value to set.
   */
  public void setEventType(gov.dhs.cbp.reference.events.avro.EventType value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return When the event occurred
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * When the event occurred
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'countryId' field.
   * @return UUID of the country
   */
  public java.lang.String getCountryId() {
    return countryId;
  }


  /**
   * Sets the value of the 'countryId' field.
   * UUID of the country
   * @param value the value to set.
   */
  public void setCountryId(java.lang.String value) {
    this.countryId = value;
  }

  /**
   * Gets the value of the 'countryCode' field.
   * @return Country code
   */
  public java.lang.String getCountryCode() {
    return countryCode;
  }


  /**
   * Sets the value of the 'countryCode' field.
   * Country code
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.String value) {
    this.countryCode = value;
  }

  /**
   * Gets the value of the 'countryName' field.
   * @return Country name
   */
  public java.lang.String getCountryName() {
    return countryName;
  }


  /**
   * Sets the value of the 'countryName' field.
   * Country name
   * @param value the value to set.
   */
  public void setCountryName(java.lang.String value) {
    this.countryName = value;
  }

  /**
   * Gets the value of the 'codeSystem' field.
   * @return Code system (e.g., ISO3166-1)
   */
  public java.lang.String getCodeSystem() {
    return codeSystem;
  }


  /**
   * Sets the value of the 'codeSystem' field.
   * Code system (e.g., ISO3166-1)
   * @param value the value to set.
   */
  public void setCodeSystem(java.lang.String value) {
    this.codeSystem = value;
  }

  /**
   * Gets the value of the 'iso2Code' field.
   * @return ISO 2-character code
   */
  public java.lang.String getIso2Code() {
    return iso2Code;
  }


  /**
   * Sets the value of the 'iso2Code' field.
   * ISO 2-character code
   * @param value the value to set.
   */
  public void setIso2Code(java.lang.String value) {
    this.iso2Code = value;
  }

  /**
   * Gets the value of the 'iso3Code' field.
   * @return ISO 3-character code
   */
  public java.lang.String getIso3Code() {
    return iso3Code;
  }


  /**
   * Sets the value of the 'iso3Code' field.
   * ISO 3-character code
   * @param value the value to set.
   */
  public void setIso3Code(java.lang.String value) {
    this.iso3Code = value;
  }

  /**
   * Gets the value of the 'numericCode' field.
   * @return ISO numeric code
   */
  public java.lang.String getNumericCode() {
    return numericCode;
  }


  /**
   * Sets the value of the 'numericCode' field.
   * ISO numeric code
   * @param value the value to set.
   */
  public void setNumericCode(java.lang.String value) {
    this.numericCode = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return Start of validity period (ISO date)
   */
  public java.lang.String getValidFrom() {
    return validFrom;
  }


  /**
   * Sets the value of the 'validFrom' field.
   * Start of validity period (ISO date)
   * @param value the value to set.
   */
  public void setValidFrom(java.lang.String value) {
    this.validFrom = value;
  }

  /**
   * Gets the value of the 'validTo' field.
   * @return End of validity period (ISO date)
   */
  public java.lang.String getValidTo() {
    return validTo;
  }


  /**
   * Sets the value of the 'validTo' field.
   * End of validity period (ISO date)
   * @param value the value to set.
   */
  public void setValidTo(java.lang.String value) {
    this.validTo = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return Version number
   */
  public long getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * Version number
   * @param value the value to set.
   */
  public void setVersion(long value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'changeRequestId' field.
   * @return Associated change request
   */
  public java.lang.String getChangeRequestId() {
    return changeRequestId;
  }


  /**
   * Sets the value of the 'changeRequestId' field.
   * Associated change request
   * @param value the value to set.
   */
  public void setChangeRequestId(java.lang.String value) {
    this.changeRequestId = value;
  }

  /**
   * Gets the value of the 'recordedBy' field.
   * @return User who recorded this change
   */
  public java.lang.String getRecordedBy() {
    return recordedBy;
  }


  /**
   * Sets the value of the 'recordedBy' field.
   * User who recorded this change
   * @param value the value to set.
   */
  public void setRecordedBy(java.lang.String value) {
    this.recordedBy = value;
  }

  /**
   * Creates a new CountryEvent RecordBuilder.
   * @return A new CountryEvent RecordBuilder
   */
  public static gov.dhs.cbp.reference.events.avro.CountryEvent.Builder newBuilder() {
    return new gov.dhs.cbp.reference.events.avro.CountryEvent.Builder();
  }

  /**
   * Creates a new CountryEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CountryEvent RecordBuilder
   */
  public static gov.dhs.cbp.reference.events.avro.CountryEvent.Builder newBuilder(gov.dhs.cbp.reference.events.avro.CountryEvent.Builder other) {
    if (other == null) {
      return new gov.dhs.cbp.reference.events.avro.CountryEvent.Builder();
    } else {
      return new gov.dhs.cbp.reference.events.avro.CountryEvent.Builder(other);
    }
  }

  /**
   * Creates a new CountryEvent RecordBuilder by copying an existing CountryEvent instance.
   * @param other The existing instance to copy.
   * @return A new CountryEvent RecordBuilder
   */
  public static gov.dhs.cbp.reference.events.avro.CountryEvent.Builder newBuilder(gov.dhs.cbp.reference.events.avro.CountryEvent other) {
    if (other == null) {
      return new gov.dhs.cbp.reference.events.avro.CountryEvent.Builder();
    } else {
      return new gov.dhs.cbp.reference.events.avro.CountryEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CountryEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CountryEvent>
    implements org.apache.avro.data.RecordBuilder<CountryEvent> {

    /** Unique identifier for this event */
    private java.lang.String eventId;
    /** Type of event */
    private gov.dhs.cbp.reference.events.avro.EventType eventType;
    /** When the event occurred */
    private long timestamp;
    /** UUID of the country */
    private java.lang.String countryId;
    /** Country code */
    private java.lang.String countryCode;
    /** Country name */
    private java.lang.String countryName;
    /** Code system (e.g., ISO3166-1) */
    private java.lang.String codeSystem;
    /** ISO 2-character code */
    private java.lang.String iso2Code;
    /** ISO 3-character code */
    private java.lang.String iso3Code;
    /** ISO numeric code */
    private java.lang.String numericCode;
    /** Start of validity period (ISO date) */
    private java.lang.String validFrom;
    /** End of validity period (ISO date) */
    private java.lang.String validTo;
    /** Version number */
    private long version;
    /** Associated change request */
    private java.lang.String changeRequestId;
    /** User who recorded this change */
    private java.lang.String recordedBy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.dhs.cbp.reference.events.avro.CountryEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.countryId)) {
        this.countryId = data().deepCopy(fields()[3].schema(), other.countryId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[4].schema(), other.countryCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.countryName)) {
        this.countryName = data().deepCopy(fields()[5].schema(), other.countryName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.codeSystem)) {
        this.codeSystem = data().deepCopy(fields()[6].schema(), other.codeSystem);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.iso2Code)) {
        this.iso2Code = data().deepCopy(fields()[7].schema(), other.iso2Code);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.iso3Code)) {
        this.iso3Code = data().deepCopy(fields()[8].schema(), other.iso3Code);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.numericCode)) {
        this.numericCode = data().deepCopy(fields()[9].schema(), other.numericCode);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[10].schema(), other.validFrom);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.validTo)) {
        this.validTo = data().deepCopy(fields()[11].schema(), other.validTo);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.version)) {
        this.version = data().deepCopy(fields()[12].schema(), other.version);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.changeRequestId)) {
        this.changeRequestId = data().deepCopy(fields()[13].schema(), other.changeRequestId);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.recordedBy)) {
        this.recordedBy = data().deepCopy(fields()[14].schema(), other.recordedBy);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
    }

    /**
     * Creates a Builder by copying an existing CountryEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.dhs.cbp.reference.events.avro.CountryEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.countryId)) {
        this.countryId = data().deepCopy(fields()[3].schema(), other.countryId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[4].schema(), other.countryCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.countryName)) {
        this.countryName = data().deepCopy(fields()[5].schema(), other.countryName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.codeSystem)) {
        this.codeSystem = data().deepCopy(fields()[6].schema(), other.codeSystem);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.iso2Code)) {
        this.iso2Code = data().deepCopy(fields()[7].schema(), other.iso2Code);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.iso3Code)) {
        this.iso3Code = data().deepCopy(fields()[8].schema(), other.iso3Code);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.numericCode)) {
        this.numericCode = data().deepCopy(fields()[9].schema(), other.numericCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[10].schema(), other.validFrom);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.validTo)) {
        this.validTo = data().deepCopy(fields()[11].schema(), other.validTo);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.version)) {
        this.version = data().deepCopy(fields()[12].schema(), other.version);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.changeRequestId)) {
        this.changeRequestId = data().deepCopy(fields()[13].schema(), other.changeRequestId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.recordedBy)) {
        this.recordedBy = data().deepCopy(fields()[14].schema(), other.recordedBy);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * Unique identifier for this event
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * Unique identifier for this event
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * Unique identifier for this event
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * Unique identifier for this event
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * Type of event
      * @return The value.
      */
    public gov.dhs.cbp.reference.events.avro.EventType getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * Type of event
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setEventType(gov.dhs.cbp.reference.events.avro.EventType value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * Type of event
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * Type of event
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * When the event occurred
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * When the event occurred
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * When the event occurred
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * When the event occurred
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryId' field.
      * UUID of the country
      * @return The value.
      */
    public java.lang.String getCountryId() {
      return countryId;
    }


    /**
      * Sets the value of the 'countryId' field.
      * UUID of the country
      * @param value The value of 'countryId'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setCountryId(java.lang.String value) {
      validate(fields()[3], value);
      this.countryId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'countryId' field has been set.
      * UUID of the country
      * @return True if the 'countryId' field has been set, false otherwise.
      */
    public boolean hasCountryId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'countryId' field.
      * UUID of the country
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearCountryId() {
      countryId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryCode' field.
      * Country code
      * @return The value.
      */
    public java.lang.String getCountryCode() {
      return countryCode;
    }


    /**
      * Sets the value of the 'countryCode' field.
      * Country code
      * @param value The value of 'countryCode'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setCountryCode(java.lang.String value) {
      validate(fields()[4], value);
      this.countryCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'countryCode' field has been set.
      * Country code
      * @return True if the 'countryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'countryCode' field.
      * Country code
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearCountryCode() {
      countryCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryName' field.
      * Country name
      * @return The value.
      */
    public java.lang.String getCountryName() {
      return countryName;
    }


    /**
      * Sets the value of the 'countryName' field.
      * Country name
      * @param value The value of 'countryName'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setCountryName(java.lang.String value) {
      validate(fields()[5], value);
      this.countryName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'countryName' field has been set.
      * Country name
      * @return True if the 'countryName' field has been set, false otherwise.
      */
    public boolean hasCountryName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'countryName' field.
      * Country name
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearCountryName() {
      countryName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'codeSystem' field.
      * Code system (e.g., ISO3166-1)
      * @return The value.
      */
    public java.lang.String getCodeSystem() {
      return codeSystem;
    }


    /**
      * Sets the value of the 'codeSystem' field.
      * Code system (e.g., ISO3166-1)
      * @param value The value of 'codeSystem'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setCodeSystem(java.lang.String value) {
      validate(fields()[6], value);
      this.codeSystem = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'codeSystem' field has been set.
      * Code system (e.g., ISO3166-1)
      * @return True if the 'codeSystem' field has been set, false otherwise.
      */
    public boolean hasCodeSystem() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'codeSystem' field.
      * Code system (e.g., ISO3166-1)
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearCodeSystem() {
      codeSystem = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'iso2Code' field.
      * ISO 2-character code
      * @return The value.
      */
    public java.lang.String getIso2Code() {
      return iso2Code;
    }


    /**
      * Sets the value of the 'iso2Code' field.
      * ISO 2-character code
      * @param value The value of 'iso2Code'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setIso2Code(java.lang.String value) {
      validate(fields()[7], value);
      this.iso2Code = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'iso2Code' field has been set.
      * ISO 2-character code
      * @return True if the 'iso2Code' field has been set, false otherwise.
      */
    public boolean hasIso2Code() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'iso2Code' field.
      * ISO 2-character code
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearIso2Code() {
      iso2Code = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'iso3Code' field.
      * ISO 3-character code
      * @return The value.
      */
    public java.lang.String getIso3Code() {
      return iso3Code;
    }


    /**
      * Sets the value of the 'iso3Code' field.
      * ISO 3-character code
      * @param value The value of 'iso3Code'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setIso3Code(java.lang.String value) {
      validate(fields()[8], value);
      this.iso3Code = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'iso3Code' field has been set.
      * ISO 3-character code
      * @return True if the 'iso3Code' field has been set, false otherwise.
      */
    public boolean hasIso3Code() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'iso3Code' field.
      * ISO 3-character code
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearIso3Code() {
      iso3Code = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'numericCode' field.
      * ISO numeric code
      * @return The value.
      */
    public java.lang.String getNumericCode() {
      return numericCode;
    }


    /**
      * Sets the value of the 'numericCode' field.
      * ISO numeric code
      * @param value The value of 'numericCode'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setNumericCode(java.lang.String value) {
      validate(fields()[9], value);
      this.numericCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'numericCode' field has been set.
      * ISO numeric code
      * @return True if the 'numericCode' field has been set, false otherwise.
      */
    public boolean hasNumericCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'numericCode' field.
      * ISO numeric code
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearNumericCode() {
      numericCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * Start of validity period (ISO date)
      * @return The value.
      */
    public java.lang.String getValidFrom() {
      return validFrom;
    }


    /**
      * Sets the value of the 'validFrom' field.
      * Start of validity period (ISO date)
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setValidFrom(java.lang.String value) {
      validate(fields()[10], value);
      this.validFrom = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * Start of validity period (ISO date)
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * Start of validity period (ISO date)
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearValidFrom() {
      validFrom = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTo' field.
      * End of validity period (ISO date)
      * @return The value.
      */
    public java.lang.String getValidTo() {
      return validTo;
    }


    /**
      * Sets the value of the 'validTo' field.
      * End of validity period (ISO date)
      * @param value The value of 'validTo'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setValidTo(java.lang.String value) {
      validate(fields()[11], value);
      this.validTo = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'validTo' field has been set.
      * End of validity period (ISO date)
      * @return True if the 'validTo' field has been set, false otherwise.
      */
    public boolean hasValidTo() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'validTo' field.
      * End of validity period (ISO date)
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearValidTo() {
      validTo = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * Version number
      * @return The value.
      */
    public long getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * Version number
      * @param value The value of 'version'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setVersion(long value) {
      validate(fields()[12], value);
      this.version = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * Version number
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'version' field.
      * Version number
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearVersion() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeRequestId' field.
      * Associated change request
      * @return The value.
      */
    public java.lang.String getChangeRequestId() {
      return changeRequestId;
    }


    /**
      * Sets the value of the 'changeRequestId' field.
      * Associated change request
      * @param value The value of 'changeRequestId'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setChangeRequestId(java.lang.String value) {
      validate(fields()[13], value);
      this.changeRequestId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'changeRequestId' field has been set.
      * Associated change request
      * @return True if the 'changeRequestId' field has been set, false otherwise.
      */
    public boolean hasChangeRequestId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'changeRequestId' field.
      * Associated change request
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearChangeRequestId() {
      changeRequestId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordedBy' field.
      * User who recorded this change
      * @return The value.
      */
    public java.lang.String getRecordedBy() {
      return recordedBy;
    }


    /**
      * Sets the value of the 'recordedBy' field.
      * User who recorded this change
      * @param value The value of 'recordedBy'.
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder setRecordedBy(java.lang.String value) {
      validate(fields()[14], value);
      this.recordedBy = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'recordedBy' field has been set.
      * User who recorded this change
      * @return True if the 'recordedBy' field has been set, false otherwise.
      */
    public boolean hasRecordedBy() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'recordedBy' field.
      * User who recorded this change
      * @return This builder.
      */
    public gov.dhs.cbp.reference.events.avro.CountryEvent.Builder clearRecordedBy() {
      recordedBy = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CountryEvent build() {
      try {
        CountryEvent record = new CountryEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (gov.dhs.cbp.reference.events.avro.EventType) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.countryId = fieldSetFlags()[3] ? this.countryId : (java.lang.String) defaultValue(fields()[3]);
        record.countryCode = fieldSetFlags()[4] ? this.countryCode : (java.lang.String) defaultValue(fields()[4]);
        record.countryName = fieldSetFlags()[5] ? this.countryName : (java.lang.String) defaultValue(fields()[5]);
        record.codeSystem = fieldSetFlags()[6] ? this.codeSystem : (java.lang.String) defaultValue(fields()[6]);
        record.iso2Code = fieldSetFlags()[7] ? this.iso2Code : (java.lang.String) defaultValue(fields()[7]);
        record.iso3Code = fieldSetFlags()[8] ? this.iso3Code : (java.lang.String) defaultValue(fields()[8]);
        record.numericCode = fieldSetFlags()[9] ? this.numericCode : (java.lang.String) defaultValue(fields()[9]);
        record.validFrom = fieldSetFlags()[10] ? this.validFrom : (java.lang.String) defaultValue(fields()[10]);
        record.validTo = fieldSetFlags()[11] ? this.validTo : (java.lang.String) defaultValue(fields()[11]);
        record.version = fieldSetFlags()[12] ? this.version : (java.lang.Long) defaultValue(fields()[12]);
        record.changeRequestId = fieldSetFlags()[13] ? this.changeRequestId : (java.lang.String) defaultValue(fields()[13]);
        record.recordedBy = fieldSetFlags()[14] ? this.recordedBy : (java.lang.String) defaultValue(fields()[14]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CountryEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CountryEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CountryEvent>
    READER$ = (org.apache.avro.io.DatumReader<CountryEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    out.writeEnum(this.eventType.ordinal());

    out.writeLong(this.timestamp);

    out.writeString(this.countryId);

    out.writeString(this.countryCode);

    out.writeString(this.countryName);

    out.writeString(this.codeSystem);

    if (this.iso2Code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.iso2Code);
    }

    if (this.iso3Code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.iso3Code);
    }

    if (this.numericCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.numericCode);
    }

    out.writeString(this.validFrom);

    if (this.validTo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.validTo);
    }

    out.writeLong(this.version);

    if (this.changeRequestId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.changeRequestId);
    }

    out.writeString(this.recordedBy);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString();

      this.eventType = gov.dhs.cbp.reference.events.avro.EventType.values()[in.readEnum()];

      this.timestamp = in.readLong();

      this.countryId = in.readString();

      this.countryCode = in.readString();

      this.countryName = in.readString();

      this.codeSystem = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.iso2Code = null;
      } else {
        this.iso2Code = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.iso3Code = null;
      } else {
        this.iso3Code = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.numericCode = null;
      } else {
        this.numericCode = in.readString();
      }

      this.validFrom = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.validTo = null;
      } else {
        this.validTo = in.readString();
      }

      this.version = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.changeRequestId = null;
      } else {
        this.changeRequestId = in.readString();
      }

      this.recordedBy = in.readString();

    } else {
      for (int i = 0; i < 15; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString();
          break;

        case 1:
          this.eventType = gov.dhs.cbp.reference.events.avro.EventType.values()[in.readEnum()];
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.countryId = in.readString();
          break;

        case 4:
          this.countryCode = in.readString();
          break;

        case 5:
          this.countryName = in.readString();
          break;

        case 6:
          this.codeSystem = in.readString();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.iso2Code = null;
          } else {
            this.iso2Code = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.iso3Code = null;
          } else {
            this.iso3Code = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.numericCode = null;
          } else {
            this.numericCode = in.readString();
          }
          break;

        case 10:
          this.validFrom = in.readString();
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.validTo = null;
          } else {
            this.validTo = in.readString();
          }
          break;

        case 12:
          this.version = in.readLong();
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.changeRequestId = null;
          } else {
            this.changeRequestId = in.readString();
          }
          break;

        case 14:
          this.recordedBy = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










